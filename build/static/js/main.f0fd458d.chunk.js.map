{"version":3,"sources":["components/Resultado.js","components/Paginacion.js","components/Loader.js","components/Buscador.js","App.js","reportWebVitals.js","index.js"],"names":["Resultado","imagenes","largeImageURL","tags","views","likes","className","src","alt","icon","faHeart","style","color","faEye","href","target","rel","Paginacion","paginaAnterior","paginaSiguiente","paginacion","onClick","Loader","Buscador","useState","query","setQuery","setImagenes","mostrar","setMostrar","setPaginacion","url","setUrl","loader","setLoader","useEffect","pagina","console","log","length","fetch","then","res","json","imagen","hits","name","onSubmit","e","preventDefault","alert","type","onChange","value","placeholder","autoComplete","map","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0fd458d.chunk.js","sourcesContent":["import \"./Resultado.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHeart, faEye } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n//Este componente lo creamos para crear la estructura de las tarjetas de las imágenes  con los elementos de la respuesta de la petición fetch para que se muestre la imagen la url, etc destructurando sus propiedades. Además añadimos iconos de Fontawesome\r\nconst Resultado = ({ imagenes }) => {\r\n  const { largeImageURL, tags, views, likes } = imagenes;\r\n  return (\r\n    <div className=\"cards\">\r\n      <div className=\"card\">\r\n        <img className=\"image\" src={largeImageURL} alt={tags} />\r\n        <p className=\"phrases\">\r\n          <FontAwesomeIcon icon={faHeart} style={{ color: \"#cfc\" }} />\r\n          &nbsp; Views: {views}.\r\n        </p>\r\n\r\n        <p className=\"phrases\">\r\n          <FontAwesomeIcon icon={faEye} style={{ color: \"#cfc\" }} />\r\n          &nbsp; Likes: {likes}.\r\n        </p>\r\n        <a\r\n          className=\"showImage\"\r\n          href={largeImageURL}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          Ver imagen\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Resultado;\r\n","import \"./Paginacion.css\";\r\n//Le pasamos destructuradas las props paginaSiguiente, paginaAnterior y paginación, es decir, las dos funciones para pasar de página y la variable que guarda la página en la que nos encontramos. Le asignamos las funciones a los botones\r\nconst Paginacion = ({ paginaAnterior, paginaSiguiente, paginacion }) => {\r\n  return (\r\n    <div className=\"botones\">\r\n      {paginacion > 1 ? (\r\n        <button onClick={paginaAnterior} className=\"boton\">\r\n          Anterior\r\n        </button>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <p className=\"parrafo\">{paginacion}</p>\r\n\r\n      <button onClick={paginaSiguiente} className=\"boton\">\r\n        Siguiente\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paginacion;\r\n","const Loader = () => {\r\n  //Guardamos el icono del loader\r\n  return (\r\n    <div>\r\n      <img src=\"../assets/spinning-circles.svg\" alt=\"Cargando...\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import { useState, useEffect } from \"react\";\r\nimport Resultado from \"./Resultado\";\r\nimport \"./Buscador.css\";\r\nimport Paginacion from \"./Paginacion\";\r\nimport Loader from \"./Loader\";\r\n\r\nconst Buscador = () => {\r\n  //Creamos las variables de estado necesarias\r\n  //En query se guarda lo que el usuario escriba en el input de tipo texto\r\n  const [query, setQuery] = useState(\"\");\r\n  //En imágenes se guarda la respuesta de las peticiones fetch en json de las imágenes las cuales luego recorreremos para mostrarlas\r\n  const [imagenes, setImagenes] = useState([]);\r\n  //Aquí se inicializa mostrar a false para que solo se muestren en la ventana del navegador cuando esté a true\r\n  const [mostrar, setMostrar] = useState(false);\r\n  //Aquí guardamos el nº de página en la que nos encontramos\r\n  const [paginacion, setPaginacion] = useState(1);\r\n  //Aquí guardamos la url de la petición fetch\r\n  const [url, setUrl] = useState(\"\");\r\n  //Aquí el icono de loading\r\n  const [loader, setLoader] = useState(false);\r\n  //En la función handleChange hacemos que guarde en query lo que escriba el usuario en el input, que mostrar siga a false y que el loader no se muestre\r\n  const handleChange = (e) => {\r\n    setQuery(e.target.value);\r\n    setMostrar(false);\r\n    setLoader(false);\r\n    console.log(query);\r\n  };\r\n  //Aquí hacemos la petición fetch y le decimos que se ejecute siempre que  cambie la variable de estado query\r\n\r\n  useEffect(() => {\r\n    let pagina = paginacion;\r\n    let url = `https://pixabay.com/api/?key=23807617-508d92312441cfcf6c7991bd4&q=${query}&per_page=20&page=${paginacion}\r\n`;\r\n\r\n    setUrl(url);\r\n\r\n    console.log(pagina);\r\n    if (query.length === 1) return null;\r\n\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        let imagen = json.hits;\r\n\r\n        setImagenes(imagen);\r\n      });\r\n  }, [query]);\r\n  //Aquí hacemos la petición fetch y le decimos que se ejecute siempre que  cambie la variable de estado paginación\r\n  useEffect(() => {\r\n    let pagina = paginacion;\r\n    let url = `https://pixabay.com/api/?key=23807617-508d92312441cfcf6c7991bd4&q=${query}&per_page=20&page=${paginacion}\r\n`;\r\n    //Que en la vble url se guarde la url del fetch\r\n\r\n    setUrl(url);\r\n\r\n    // console.log(pagina);\r\n    if (query.length === 1) return null;\r\n    setLoader(true);\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        let imagen = json.hits;\r\n\r\n        setImagenes(imagen);\r\n        setLoader(false);\r\n      });\r\n  }, [paginacion]);\r\n\r\n  //console.log(imagenes);\r\n  console.log(url);\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!query) {\r\n      alert(\"Busca una imagen válida\");\r\n    }\r\n    setMostrar(true);\r\n  };\r\n\r\n  //Funciones de la paginación para ir atrás y alante\r\n  const paginaAnterior = () => {\r\n    if (paginacion <= 1) return;\r\n    let pagina = paginacion;\r\n    pagina -= 1;\r\n    setPaginacion(pagina);\r\n    console.log(paginacion);\r\n  };\r\n  const paginaSiguiente = () => {\r\n    let pagina = paginacion;\r\n    pagina += 1;\r\n    setPaginacion(pagina);\r\n    console.log(paginacion);\r\n  };\r\n  //Aquí está el formulario , le añadimos handleSubmit al botón de envío y handleChange al input\r\n  return (\r\n    <div className=\"formulario\">\r\n      <form className=\"form\" name=\"form\" onSubmit={handleSubmit}>\r\n        <input\r\n          className=\"text\"\r\n          type=\"text\"\r\n          name=\"imagen\"\r\n          onChange={handleChange}\r\n          placeholder=\"Busca tu imagen...Ej:Tenis\"\r\n          autoComplete=\"off\"\r\n        />\r\n        <input type=\"submit\" className=\"submit\" value=\"Enviar\" />\r\n      </form>\r\n      <div className=\"buscador\">\r\n        {loader && <Loader />}\r\n        {mostrar &&\r\n          imagenes.map((imagen) => (\r\n            <Resultado imagenes={imagen} key={imagen.id} />\r\n          ))}\r\n      </div>\r\n      {mostrar && (\r\n        <Paginacion\r\n          paginaAnterior={paginaAnterior}\r\n          paginaSiguiente={paginaSiguiente}\r\n          paginacion={paginacion}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buscador;\r\n","import \"./App.css\";\n\nimport Buscador from \"./components/Buscador\";\n//Aquí tenemos la app principal donde impoeramos el componente Buscador\nfunction App() {\n  return (\n    <div>\n      <Buscador />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}